{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Redux Actions": {
    "prefix": "!racts",
    "description": "리덕스 스토어의 기본 액션 타입 보일러 플레이트를 만든다. 수행/성공/실패 3가지가 만들어진다. 초기 작업 시 유용하다.",
    "body": [
      "import { createAction, ActionType } from 'typesafe-actions';",
      "import { ErrorModel } from '../../../common';",
      "",
      "/**",
      " * 액션: 샘플 ${10:기능설명}.",
      " */",
      "export const act${1:Feature}${2|Load,Save,Clear,Init,Send,Remove,Add,Update,Upload,Change,Check,Read,Signin,Signup|} = createAction('$1$2')();",
      "/**",
      " * 액션: 샘플 $10 성공.",
      " */",
      "export const act$1$2Succ = createAction('$1$2Succ')<ResponseModel>();",
      "/**",
      " * 액션: 샘플 $10 실패.",
      " */",
      "export const act$1$2Fail = createAction('$1$2Fail')<",
      "  ErrorModel",
      ">();",
      "",
      "const actions = {",
      "  act$1$2,",
      "  act$1$2Succ,",
      "  act$1$2Fail,",
      "};",
      "",
      "export type $1Actions = ActionType<typeof actions>;",
      ""
    ]
  },
  "Redux Single Action": {
    "prefix": "!ract",
    "description": "리덕스 스토어에서 쓰일 액션 1가지를 만든다.",
    "body": [
      "/**",
      " * 액션: 샘플 ${10:기능설명}.",
      " */",
      "export const act${1:Feature}${2|Load,Save,Clear,Init,Send,Remove,Add,Update,Upload,Change,Check,Read,Signin,Signup|} = createAction('$1$2')<CustomPayload>();",
      "act$1$2,"
    ]
  },
  "Redux Effects": {
    "prefix": "!reffs",
    "description": "리덕스 스토어에서 쓰일 이펙트를 만든다. 초기 설정 시 쓰인다.",
    "body": [
      "import { createEffect } from '../../../util';",
      "import {",
      "  act$1$2,",
      "  act$1$2Succ,",
      "  act$1$2Fail,",
      "} from '../actions';",
      "import { ${3:PayloadModel} } from '../models';",
      "import { ${4:sampleApi} } from '../services';",
      "",
      "/**",
      " * 이펙트: ${10:설명}",
      " */",
      "export const eff${1:Feature}${2|Load,Save,Clear,Init,Send,Remove,Add,Update,Upload,Change,Check,Read,Signin,Signup|} = createEffect<$3>(",
      "  async (payload, dispatch) => {",
      "    dispatch(act$1$2Load());",
      "",
      "    try {",
      "      const res = await $4${5:.};",
      "",
      "      dispatch(act$1$2Succ(res));",
      "    } catch (e) {",
      "      dispatch(act$1$2Fail(e));",
      "    }",
      "  },",
      ");",
      ""
    ]
  },
  "Redux Single Effect": {
    "prefix": "!reff",
    "description": "리덕스 스토어에서 쓰일 단일 이펙트를 만든다.",
    "body": [
      "/**",
      " * 이펙트: ${10:설명}",
      " */",
      "export const eff${1:Feature}${2|Load,Save,Clear,Init,Send,Remove,Add,Update,Upload,Change,Check,Read,Signin,Signup|} = createEffect<${3:PayloadModel}>(",
      "  async (payload, dispatch) => {",
      "    dispatch(act$1$2Load());",
      "",
      "    try {",
      "      const res = await ${4:sampleApi}${5:.};",
      "",
      "      dispatch(act$1$2Succ(res));",
      "    } catch (e) {",
      "      dispatch(act$1$2Fail(e));",
      "    }",
      "  },",
      ");"
    ]
  },
  "Redux Reducer": {
    "prefix": "!rred",
    "description": "리덕스 스토어의 리듀서를 만든다.",
    "body": [
      "import { createReducer } from 'typesafe-actions';",
      "import {",
      "  act${3:Feature},",
      "  ${2:Feature}Actions,",
      "} from '../actions';",
      "",
      "/**",
      " * 스토어 상태: ${10:설명}",
      " */",
      "export interface ${1:Feature}State {",
      "}",
      "",
      "export function getInit$1State(): $1State {",
      "  return {",
      "  };",
      "}",
      "",
      "/**",
      "* 리듀서: ${11:설명}",
      "*/",
      "export const ${TM_FILENAME_BASE/\\..+$//}Reducer = createReducer<$1State, $2Actions>(",
      "  getInit$1State(),",
      ").handleAction(act$3, (state, action) => ({",
      "  ...state,",
      "}));",
      ""
    ]
  }
}
