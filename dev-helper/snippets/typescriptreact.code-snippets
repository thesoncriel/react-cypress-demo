{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "React Page Component": {
    "prefix": "!rpc",
    "description": "페이지 컴포넌트를 만든다.",
    "body": [
      "import React, { FC } from 'react';",
      "import { useQueryParams } from '../../../common/hooks';",
      "import { PageContainer } from '../../_shared';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Queries} {",
      "  id?: string;",
      "}",
      "",
      "/**",
      " * 페이지: ${10:설명}",
      " */",
      "export const $TM_FILENAME_BASE: FC = () => {",
      "  const queries = useQueryParams<$1>();",
      "",
      "  return (",
      "    <PageContainer title=\"\">",
      "    </PageContainer>",
      "  );",
      "};",
      ""
    ]
  },
  "React Container Component": {
    "prefix": "!rcc",
    "description": "컨테이너 컴포넌트를 만든다.",
    "body": [
      "import React, { FC } from 'react';",
      "import { useSelector } from 'react-redux';",
      "import { useADispatch } from '../../../common/hooks';",
      "import { LayoutContainer } from '../../_shared';",
      "import { ${2:selSampleItems} } from '../selectors';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "/**",
      " * 컨테이너: ${10:설명}",
      " */",
      "export const $TM_FILENAME_BASE: FC<$1> = () => {",
      "  const dispatch = useADispatch();",
      "  const state = useSelector(${2:selSampleItems});",
      "",
      "  return (",
      "    <LayoutContainer>",
      "    </LayoutContainer>",
      "  );",
      "};",
      ""
    ]
  },
  "React Single Function Component": {
    "prefix": "!rc",
    "description": "함수형 컴포넌트를 만든다. - 단순한 단일형 컴포넌트.",
    "body": [
      "import React, { FC } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:div}<$1>`",
      "",
      "`;",
      "",
      "/**",
      " * 컴포넌트: ${10:설명}",
      " */",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  children,",
      "}) => {",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}>",
      "      {children}",
      "    </${2/(.*)/${0:/capitalize}/}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Wapper Function Component": {
    "prefix": "!rwc",
    "description": "함수형 컴포넌트를 만든다. - 래핑되는 컴포넌트.",
    "body": [
      "import React, { FC } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:div}<$1>`",
      "",
      "`;",
      "",
      "/**",
      " * 컴포넌트: ${10:설명}",
      " */",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  children,",
      "}) => {",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}>",
      "      {children}",
      "    </${2/(.*)/${0:/capitalize}/}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Input Function Component": {
    "prefix": "!ric",
    "description": "함수형 컴포넌트를 만든다. - 입력 요소 컴포넌트.",
    "body": [
      "import React, { ChangeEventHandler, FC } from 'react';",
      "import styled from 'styled-components';",
      "import { InputComponentProps } from '../../../../common';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} extends InputComponentProps {",
      "  /**",
      "   * 입력을 하지 않았을 때 출력 될 안내 텍스트",
      "   */",
      "  placeholder?: string;",
      "}",
      "",
      "const ${2/(.*)/${0:/capitalize}/} = styled.${2:input}<Omit<$1, 'onChange'>>`",
      "  &:disabled {",
      "    ",
      "  }",
      "`;",
      "",
      "/**",
      " * 컴포넌트: ${4:설명}",
      " */",
      "export const $TM_FILENAME_BASE: FC<$1> = ({",
      "  disabled,",
      "  className,",
      "  value,",
      "  name,",
      "  onChange,",
      "}) => {",
      "",
      "  const handleChange: ChangeEventHandler<HTMLInputElement> = e => {",
      "    onChange && onChange({",
      "      name,",
      "      value: e.target.value,",
      "    });",
      "  };",
      "",
      "  return (",
      "    <${2/(.*)/${0:/capitalize}/}",
      "      type=\"text\"",
      "      name={name}",
      "      value={value}",
      "      className={className}",
      "      disabled={disabled}",
      "      onChange={handleChange}",
      "    />",
      "  );",
      "};",
      ""
    ]
  }
}
